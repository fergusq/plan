case x {
	default := TRUE
	push { |ys...|; for y in ys if [ x =~ y ] do rval := default; default = FALSE; return rval; done; return FALSE }
	push { return default }
}

function execPlan(file, data) {
	error("file does not exist: `"..file.."'") unless fileExists(file)
	error("is directory: `"..file.."'") unless isFile(file)
	readLines(file) | lex() | parse() | interpret(data)
}

/*** LEXER ***/

record Token {}

record StringToken(line_num, str) : Token {
	line_num : integer = line_num
	val : string = str
}

record IdentifierToken(line_num, id) : Token {
	line_num : integer = line_num
	val : string = id
}

record KeywordToken(line_num, kw) : Token {
	line_num : integer = line_num
	val : string = kw
}

record EOFToken(line_num) : Token {
	line_num : integer = line_num
	val : string = "<EOF>"
}

function lex() {
	line_num := 1
	splitMany(sep="\\|") | for row do
		sec_num := 1
		for section in row do
			if [ sec_num % 2 = 1 ] do
				push(new StringToken(line_num, section))
			else
				split(section, sep="(?<=[^\\wäöå])|(?=[^\\wäöå])") | validateTokens(line_num)
			done
			sec_num ++
		done
		line_num ++
		push(new StringToken(line_num, "\n"))
	done
	push(new EOFToken(line_num))
}

function validateTokens(line_num) {
	for token do
		case(token) | pull(matches, somethingElse)
		push(new KeywordToken(line_num, token)) if matches("for|end|in|eq|block|with|set|ifdef|ifndef|iflist|ifnlist|ifmap|ifnmap|ifstr|ifnstr|if|ifn|include|\\.|\\[|\\]")
		push(new IdentifierToken(line_num, token)) if matches("[\\wäöå]+")
		if matches("\"") do
			l := []
			pull(token2)
			while [ token2 != "\"" ] do
				l += token2
				token2 = pull()
			done
			push(new StringToken(line_num, l&""))
		done
		{}() if matches("\\s*")
		error("illegal token: `"..token.."'") if somethingElse
	done
}

/*** PARSER ***/

function identifierToken(&var) {
	pull(token)
	error("expected identifier, got `"..token.val.."' (line "..token.line_num..")") unless [ token is IdentifierToken ]
	var := token
}

function identifier(&var) {
	identifierToken(token)
	var := token.val
}

function expect(kw) {
	pull(token)
	error("syntax error at token `"..token.val.."' (line "..token.line_num.."), expected `"..kw.."'") unless [ token is KeywordToken and token.val = kw ]
}

function expectMatch(kw_regex) {
	pull(token)
	error("syntax error at token `"..token.val.."' (line "..token.line_num.."), expected `"..kw.."'") unless [ token is KeywordToken and token.val =~ kw_regex ]
	push(token.val)
}

record Command {}

record PrintStringCommand(str) : Command {
	val : string = str
}

record VarCommand(chain) : Command {
	chain : list = chain
}

record ForCommand(var, expr, body) : Command {
	var : string = var
	expr : VarCommand = expr
	body : list<<Command>> = body
}

record If1Command(expr, op, positive, body) : Command {
	expr : VarCommand = expr
	op : string = op
	positive : boolean = positive
	body : list<<Command>> = body
}

record If2Command(expr1, expr2, op, positive, body) : Command {
	expr1 : Command = expr1
	expr2 : Command = expr2
	op : string = op
	positive : boolean = positive
	body : list<<Command>> = body
}

record BlockCommand(var, body) : Command {
	var : string = var
	body : list<<Command>> = body
}

record WithCommand(var, expr, body) : Command {
	var : string = var
	expr : Command = expr
	body : list<<Command>> = body
}

record SetCommand(var, expr) : Command {
	var : string = var
	expr : Command = expr
}

record IncludeCommand(file) : Command {
	file : string = file
}

function parse() {
	until [ tryPeek(token) and token is EOFToken ] do
		parseCommand()
	done
}

function parseCommand() {
	pull(token)
	if [ token is StringToken or token is IdentifierToken ] do
		parseExpression(token)
		return
	done
	if [ token is KeywordToken and token.val = "for" ] do
		parseFor()
		return
	done
	if [ token is KeywordToken and token.val =~ "ifn?def" ] do
		parseIf1(token.val = "ifdef", "def")
		return
	done
	if [ token is KeywordToken and token.val =~ "ifn?list" ] do
		parseIf1(token.val = "iflist", "list")
		return
	done
	if [ token is KeywordToken and token.val =~ "ifn?map" ] do
		parseIf1(token.val = "ifmap", "map")
		return
	done
	if [ token is KeywordToken and token.val =~ "ifn?str" ] do
		parseIf1(token.val = "ifstr", "str")
		return
	done
	if [ token is KeywordToken and token.val =~ "ifn?" ] do
		parseIf2(token.val = "if")
		return
	done
	if [ token is KeywordToken and token.val = "block" ] do
		parseBlock()
		return
	done
	if [ token is KeywordToken and token.val = "with" ] do
		parseWith()
		return
	done
	if [ token is KeywordToken and token.val = "set" ] do
		parseSet()
		return
	done
	if [ token is KeywordToken and token.val = "include" ] do
		parseInclude()
		return
	done
	error("syntax error at token `"..token.val.."' (line "..token.line_num..")")
}

function parseExpression(token) {
	if [ token is StringToken ] do
		return new PrintStringCommand(token.val)
	done
	if [ token is IdentifierToken ] do
		return parseVar(token.val)
	done
	error("syntax error at token `"..token.val.."' (line "..token.line_num..")")
}

function parseBody() {
	body := new list<<Command>>
	until [ tryPeek(token) and token is KeywordToken and token.val = "end" ] do
		body += parseCommand()
	done
	expect("end")
	return body
}

function parseFor() {
	identifier(var)
	expect("in")
	identifier(chain_start)
	expr := parseVar(chain_start)
	body := parseBody()
	push(new ForCommand(var, expr, body))
}

function parseIf1(positive, op) {
	identifier(chain_start)
	expr := parseVar(chain_start)
	body := parseBody()
	push(new If1Command(expr, op, positive, body))
}

function parseIf2(positive) {
	expr1 := parseExpression(pull())
	op := expectMatch("in|eq")
	expr2 := parseExpression(pull())
	body := parseBody()
	push(new If2Command(expr1, expr2, op, positive, body))
}

function parseBlock() {
	identifier(var)
	body := parseBody()
	push(new BlockCommand(var, body))
}

function parseWith() {
	identifier(var)
	expr := parseExpression(pull())
	body := parseBody()
	push(new WithCommand(var, expr, body))
}

function parseSet() {
	identifier(var)
	expr := parseExpression(pull())
	push(new SetCommand(var, expr))
}

function parseInclude() {
	pull(token)
	if [ token is StringToken ] do
		return new IncludeCommand(token.val)
	done
	error("syntax error at token `"..token.val.."' (line "..token.line_num..")")
}

function parseChain(&chain) {
	while [ peek() is KeywordToken and peek().val =~ "\\.|\\[" ] do
		if [ pull().val = "." ] do /* nimi esim. kartta.avain */
			identifier(id)
			chain += id
		else /* alaketju esim. kartta[a.b] */
			identifier(id)
			chain2 := [id]
			parseChain(chain2)
			expect("]")
			chain += chain2
		done
	done
}

function parseVar(var) {
	chain := new list
	chain += var
	parseChain(chain)
	push(new VarCommand(chain))
}

/*** INTERPRETER ***/

function interpret(scope) {
	for command do
		if [ command is PrintStringCommand ] do
			push(command.val); continue
		done
		if [ command is VarCommand ] do
			val := retrieveVar(scope, command.chain)
			if [ val is string ] do
				push(val)
				continue
			done
			if [ val is list<<Command>> ] do
				val() | interpret(scope)
				continue
			done
			if [ val is list ] do
				/* listat käsitellään if in -rakennetta varten */
				push(val)
				continue
			done
			error("not clear what to do with this: `"..val.."'")
		done
		if [ command is BlockCommand ] do
			scope[command.var] = command.body
			continue
		done
		if [ command is If1Command ] do
			if [ command.op = "def" ] do
				obj := retrieveVar(scope, command.expr.chain[:-1])
				key := command.expr.chain[-1]
				if [ obj is list ] do
					continue if [ #obj > 0 ]
					key = parseInteger(key) /* TODO parempi virheenkäsittely */
				done
				if [ command.positive = obj[key]? ] do
					command.body() | interpret(scope)
				done
				continue
			done
			obj := retrieveVar(scope, command.expr.chain)
			cond = FALSE
			case(command.op) | pull(itIs, somethingElse)
			cond = obj is list if itIs "list"
			cond = obj is map if itIs "map"
			cond = obj is string if itIs "str"
			error("unknown operator: `"..command.op.."'") if somethingElse
			if [ command.positive = cond ] do
				command.body() | interpret(scope)
			done
		done
		if [ command is If2Command ] do
			val1 := [push(command.expr1) | interpret(scope)]
			val2 := [push(command.expr2) | interpret(scope)]
			cond := FALSE
			if [ command.op = "eq" ] do
				cond = [ val1 = val2 ]()
			done
			if [ command.op = "in" ] do
				unless [ #val1 = 1 and #val2 = 1 and val2[0] is list ] do
					error("illegal use of if-in: the operands should single values and the second operand should be a list")
				done
				cond = [ val1[0] in val2[0] ]()
			done
			if [ command.positive = cond ] do
				command.body() | interpret(scope)
			done
			continue
		done
		if [ command is ForCommand ] do
			vals := retrieveVar(scope, command.expr.chain)
			unless [ vals is list ] do
				error("illegal use of for: `"..vals.."' is not iterable")
			done
			for val in vals do
				scope[command.var] = val
				command.body() | interpret(scope)
			done
			continue
		done
		if [ command is WithCommand ] do
			if [ scope[command.var]? ] do
				previous_value := scope[command.var]
				scope[command.var] := push(command.expr) | interpret(scope)
				command.body() | interpret(scope)
				scope[command.var] = previous_value
			else
				scope[command.var] := push(command.expr) | interpret(scope)
				command.body() | interpret(scope)
			done
		done
		if [ command is SetCommand ] do
			scope[command.var] := push(command.expr) | interpret(scope)
		done
		if [ command is IncludeCommand ] do
			execPlan(command.file, scope)
		done
	done
}

function reverse(l) {
	a := []
	i := #l
	while [ i > 0 ] do
		i --
		a += l[i]
	done
	return a
}

function retrieveVar(scope, chain) {
	current_val = scope
	while [ #chain > 0 ] do
		key := chain[0]
		if [ key is list ] do
			key = retrieveVar(scope, key)
			unless [ key is string ] do
				error("not clear what to do with this: `"..key.."'")
			done
		done
		if [ current_val is list ] do
			case(key) | pull(matches, somethingElse)
			if matches("[0-9]+") do
				key = parseInteger(key)
			done
			if matches("sorted_by_\\w+") do
				/* sort-funktiota ei vielä ole Rödassa, joten tämä ei toimi sitten */
				current_val = [current_val() | sort(key={ |e|; return e[key[10:]]})]
				shift chain
				continue
			done
			if matches("first_[0-9]+") do
				current_val = current_val[:parseInteger(key[6:])]
				shift chain
				continue
			done
			if matches("last_[0-9]+") do
				current_val = current_val[-parseInteger(key[5:]):]
				shift chain
				continue
			done
			if matches("reverse") do
				current_val = reverse(current_val)
				shift chain
				continue
			done
			if somethingElse do
				error("unknown index or method: `"..key.."'")
			done
		done
		unless [ current_val is map or current_val is list ] do
			error("not a list or a map: `"..current_val.."'")
		done
		if [ current_val[key]? ] do
			current_val = current_val[key]
			shift chain
		else /* oikeastaan onko tässä järkeä, sillä Röda-tulkin oletusvirhe on lähes sama... */
			error("variable or key not found: `"..key.."'")
		done
	done
	return current_val
}
