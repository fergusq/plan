{
	import "json.röd"
	import "planlib.röd"
}

function loadJSON(file) {
	return toRödaObj(json([readLines(file)]&"\n"))
}

function countSlashes(str) {
	num := 0
	push(str) | replace("/+", "/") | split(sep="") | for char if [ char = "/" ] do
		num ++
	done
	return num
}

record Page(path, data, template) {
	path : string = path
	data : map = data
	template : string = template
}

main {
	data := new map
	
	errprint("Loading JSON...")
	
	config := loadJSON("data/config.json")
	data["config"] = config
	data["all_pages"] = []
	
	errprint(" [DONE]\n")
	errprint("Initializing page classes...")
	
	collectkeys := []
	collectkeymap := new map
	for pageclass in config["pageclasses"] do
		classdata := loadJSON("data/"..pageclass["datafile"])
		data[pageclass["name"]] = classdata /* sivuluokkalista: luokan sivut listana */
		data[pageclass["name"].."_map"] = new map /* sivuluokkakartta luokan sivut karttana */
		
		/* collectkey: tapa lisätä sivuja kokoelmiin */
		/* kokoelma-sivuluokka määrittelee collectkeyn, joka on siis sen ominaisuuden nimi, jota käytetään sivujen lisäämisessä kokoelmiin */
		/* jos sivulla on tämä ominaisuus, sen arvon oletetaan olevan lista, joka sisältää joukon kokoelmien nimiä */
		if [ pageclass["collectkey"]? ] do
			collectkeys += pageclass["collectkey"]
			collectkeymap[pageclass["collectkey"]] = data[pageclass["name"].."_map"]
			
			/* lisätään jokaiselle sivuluokan sivulle lista, johon kokoelmaan sisältyvät sivut myöhemmin lisätään */
			for page in classdata do
				page["pages"] := []
				
				/* tallennetaan sivu sivuluokkakarttaan */
				data[pageclass["name"].."_map"][page["name"]] = page
			done
		done
	done
	
	errprint(" [DONE]\n")
	errprint("Initializing pages...")
	pages := []
	for pageclass in config["pageclasses"] do
		classdata := data[pageclass["name"]]
		for page in classdata do
			errprint("\rInitializing "..pageclass["name"].."/"..page["name"].."...".." "*20)
			
			/* asetetaan pageclass-kenttä */
			page["pageclass"] = pageclass["name"]
			
			/* selvitetään malline, jonka pohjalta sivu generoidaan */
			if [ page["templatefile"]? ] do
				push(page["templatefile"])
			else
				push(pageclass["templatefile"])
			done | pull(templatefile)
			
			/* lasketaan sivun osoite */
			page["path"] = if [ pageclass["dir"] != "" ] do [pageclass["dir"].."/"]; else [""]; done..page["name"]..".html"
			
			/* tallennetaan sivu sivuluokkakarttaan */
			data[pageclass["name"].."_map"][page["name"]] = page
			
			/* tarkistetaan, onko sivulla jonkun kokelmaan määrittelemää collectkey-ominaisuutta */
			for collectkey in collectkeys do
				if [ page[collectkey]? ] do
					/* lisätään sivu kokoelmiin */
					for collection in page[collectkey] do
						collectkeymap[collectkey][collection]["pages"] += page
					done
				done
			done
			
			/* tallennetaan sivu kaikkien sivujen listaan */
			data["all_pages"] += page
			
			pages += new Page(page["path"], page, "templates/"..templatefile)
		done
	done
	
	errprint("\rInitializing pages... [DONE]".." "*20.."\n")
	errprint("Generating pages...")
	
	for page in pages do
		errprint("\rGenerating "..page.path.."...".." "*20)
		
		data["self"] = page.data
		data["root"] = "../"*countSlashes(page.path)
		execPlan(page.template, data) | writeStrings("build/"..page.path)
	done
	
	errprint("\rGenerating pages... [DONE]".." "*20.."\n")
}
